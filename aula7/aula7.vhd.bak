library ieee;
use ieee.std_logic_1164.all;

entity processador is
  -- Total de bits das entradas e saidas
  generic ( larguraDados : natural := 8;
            larguraEnderecos : natural := 9;
				tamanhoROM: natural := 9;
				dadoROM: natural := 13;
				tamanhoRAM: natural := 8;
				dadoRAM: natural := 8;

            simulacao : boolean := TRUE -- para gravar na placa, altere de TRUE para FALSE
  );
  port   (
    CLOCK_50 : in std_logic;
    --KEY: in std_logic_vector(3 downto 0);
	 KEY: in std_logic_vector(3 downto 0);
    --SW: in std_logic_vector(9 downto 0);
    PC_OUT: out std_logic_vector(larguraEnderecos-1 downto 0);
    --LEDR  : out std_logic_vector(9 downto 0);
	 sinal_flag: out std_logic;
	 entradaB: out STD_LOGIC_VECTOR(7 downto 0);
	 entradaA: out STD_LOGIC_VECTOR(7 downto 0);
	 entrada_operacao: out STD_LOGIC_VECTOR(1 downto 0);
	 selMuxJMP: out STD_LOGIC_VECTOR(1 downto 0)
	 --saida_acumulador: out std_logic_vector(larguraDados-1 downto 0)
	 --saida_decoder: out  std_logic_vector(5 downto 0)
  );
end entity;


architecture arquitetura of processador is

  signal CLK : std_logic;
  signal proxPC : std_logic_vector (8 downto 0);
  signal Endereco : std_logic_vector (8 downto 0);
  signal saida_dados_RAM : std_logic_vector (7 downto 0);
  signal saida_dados_ROM : std_logic_vector (12 downto 0);
  signal Sinais_Controle : std_logic_vector (9 downto 0);
  signal SelMUX : std_logic;
  signal saidaUla_flag : std_logic;
  signal saida_flag : std_logic;
  signal entrada_flag : std_logic;
  signal Habilita_A : std_logic;
  signal jump : std_logic;
  signal Operacao_ULA :std_logic_vector (1 downto 0);
  signal hab_leitura : std_logic;
  signal hab_escrita : std_logic;
  signal SelMuxRetorno :std_logic_vector (1 downto 0);
  signal hab_escrita_retorno : std_logic;
  signal hab_flag : std_logic;
  signal saida_MUX : std_logic_vector (7 downto 0);
  signal saida_MUX_JMP : std_logic_vector (8 downto 0);
  signal saida_ULA : std_logic_vector (7 downto 0);
  signal REG1_ULA_A : std_logic_vector (7 downto 0);
  signal saida_end_retorno : std_logic_vector (8 downto 0);


begin

-- Instanciando os componentes:

-- Para simular, fica mais simples tirar o edgeDetector
gravar:  if simulacao generate
CLK <= KEY(0);
else generate
detectorSub0: work.edgeDetector(bordaSubida)
        port map (clk => CLOCK_50, entrada => (not KEY(0)), saida => CLK);
end generate;

--OK
MUX1 :  entity work.muxGenerico2x1  generic map (larguraDados => larguraDados)
        port map(entradaA_MUX => saida_dados_RAM,
                 entradaB_MUX => saida_dados_ROM(7 downto 0),
                 seletor_MUX => SelMUX,
                 saida_MUX => saida_MUX);


					  
					  
MUXJMP :  entity work.muxGenerico4x1  generic map (larguraDados => 9)
        port map(entradaA_MUX => proxPC,
                 entradaB_MUX => saida_dados_ROM(8 downto 0),
					  entradaC_MUX => saida_end_retorno,
					  entradaD_MUX => "000000000",
                 seletor_MUX => SelMuxRetorno,
                 saida_MUX => saida_MUX_JMP);
					  
--OK
REGA : entity work.registradorGenerico   generic map (larguraDados => 8)
          port map (DIN => saida_ULA, DOUT => REG1_ULA_A, ENABLE => Habilita_A, CLK => CLK, RST => '0');

			 
flipflop : entity work.flipflop   generic map (larguraDados => 1)
          port map (DIN => saida_flag, DOUT => entrada_flag,ENABLE => hab_flag, CLK => CLK, RST => '0');

			 
			 
End_retorno : entity work.registradorGenerico   generic map (larguraDados => 9)
          port map (DIN => proxPC, DOUT => saida_end_retorno, ENABLE => hab_escrita_retorno,CLK => CLK, RST => '0');
			 
--OK
PC : entity work.registradorGenerico   generic map (larguraDados => tamanhoROM)
          port map (DIN => saida_MUX_JMP, DOUT => Endereco, ENABLE => '1', CLK => CLK, RST => '0');

--OK
incrementaPC :  entity work.somaConstante  generic map (larguraDados => larguraEnderecos, constante => 1)
        port map( entrada => Endereco, saida => proxPC);

--OK
ULA1 : entity work.ULASomaSub  generic map(larguraDados => larguraDados)
          port map (entradaA => REG1_ULA_A, entradaB => saida_MUX, saida => Saida_ULA, saidaUla_flag => saida_flag, seletor => Operacao_ULA);

--OK
ROM_instrucao : entity work.memoriaROM   generic map (dataWidth => dadoROM, addrWidth => tamanhoROM)
          port map (Endereco => Endereco, Dado => saida_dados_ROM);

--OK			 
decoder :  entity work.decoder
        port map( opcode => saida_dados_ROM(12 downto 9),
						entrada_flag => entrada_flag,
                 saida => Sinais_Controle);
--OK			  
MemoriaRAM : entity work.memoriaRAM   generic map (dataWidth => dadoRAM, addrWidth => tamanhoRAM)
          port map (addr => saida_dados_ROM(7 downto 0), we => hab_escrita, re => hab_leitura, habilita => saida_dados_ROM(8) , dado_in => REG1_ULA_A, dado_out => saida_dados_RAM, clk => CLK);

hab_escrita_retorno <= Sinais_Controle(9);
SelMuxRetorno <= Sinais_Controle(8 downto 7);
selMUX <= Sinais_Controle(6);
Habilita_A <= Sinais_Controle(5);
Operacao_ULA <= Sinais_Controle(4 downto 3);
hab_flag <= Sinais_Controle(2);
hab_leitura <= Sinais_Controle(1);
hab_escrita <= Sinais_Controle(0);




 entradaA <= REG1_ULA_A;
 entradaB <= saida_MUX;
 entrada_operacao <= Operacao_ULA;
 
sinal_flag <= entrada_flag;
PC_OUT <= Endereco;
selMuxJMP <= SelMuxRetorno;
--saida_acumulador <= REG1_ULA_A;

end architecture;